<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulador de Crédito</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root" class="p-4"></div>

    <script type="text/babel">
        const App = () => {
            const [montoSolicitado, setMontoSolicitado] = React.useState('');
            const [tasaEfectivaAnual, setTasaEfectivaAnual] = React.useState('');
            const [plazoMeses, setPlazoMeses] = React.useState('');
            const [frecuenciaAmortizacion, setFrecuenciaAmortizacion] = React.useState('mensual');
            const [tasaSeguroVidaAnual, setTasaSeguroVidaAnual] = React.useState(''); // Campo del seguro de vida
            const [cuotaTotal, setCuotaTotal] = React.useState(null);
            const [error, setError] = React.useState('');

            const calcularCuotaPrestamo = (p, r, n) => {
                if (p <= 0 || r < 0 || n <= 0) return 0;
                if (r === 0) return p / n;
                const numerador = r * Math.pow(1 + r, n);
                const denominador = Math.pow(1 + r, n) - 1;
                return p * (numerador / denominador);
            };

            React.useEffect(() => {
                setError('');
                setCuotaTotal(null);

                const parsedMontoSolicitado = parseFloat(montoSolicitado);
                const parsedTasaEfectivaAnual = parseFloat(tasaEfectivaAnual);
                const parsedPlazoMeses = parseFloat(plazoMeses);
                const parsedTasaSeguroVidaAnual = parseFloat(tasaSeguroVidaAnual || 0) / 100;

                // Validaciones mínimas para evitar NaN o cálculos erróneos
                if (isNaN(parsedMontoSolicitado) || isNaN(parsedTasaEfectivaAnual) || isNaN(parsedPlazoMeses) || parsedMontoSolicitado <= 0 || parsedPlazoMeses <= 0) {
                    if (montoSolicitado || tasaEfectivaAnual || plazoMeses) setError('Ingresa valores válidos para Monto, Tasa y Plazo.');
                    return;
                }
                if (isNaN(parsedTasaSeguroVidaAnual) || parsedTasaSeguroVidaAnual < 0) {
                    if (tasaSeguroVidaAnual) setError('La tasa del seguro de vida debe ser un número positivo o cero.');
                    return;
                }

                let tasaPorPeriodo;
                let numeroTotalPeriodos;
                let divisorSeguroVida; 

                switch (frecuenciaAmortizacion) {
                    case 'mensual':
                        tasaPorPeriodo = (parsedTasaEfectivaAnual / 12) / 100;
                        numeroTotalPeriodos = parsedPlazoMeses;
                        divisorSeguroVida = 12;
                        break;
                    case 'bimestral':
                        tasaPorPeriodo = (parsedTasaEfectivaAnual / 6) / 100;
                        numeroTotalPeriodos = parsedPlazoMeses / 2;
                        divisorSeguroVida = 6;
                        break;
                    case 'trimestral':
                        tasaPorPeriodo = (parsedTasaEfectivaAnual / 4) / 100;
                        numeroTotalPeriodos = parsedPlazoMeses / 3;
                        divisorSeguroVida = 4;
                        break;
                    case 'semestral':
                        tasaPorPeriodo = (parsedTasaEfectivaAnual / 2) / 100;
                        numeroTotalPeriodos = parsedPlazoMeses / 6;
                        divisorSeguroVida = 2;
                        break;
                    case 'anual':
                        tasaPorPeriodo = (parsedTasaEfectivaAnual / 1) / 100;
                        numeroTotalPeriodos = parsedPlazoMeses / 12;
                        divisorSeguroVida = 1;
                        break;
                    default:
                        setError('Frecuencia de amortización no válida.');
                        return;
                }

                if (numeroTotalPeriodos <= 0 || numeroTotalPeriodos % 1 !== 0) {
                     setError('El plazo no es compatible con la frecuencia de pago seleccionada.');
                     return;
                }

                const cuotaSoloPrestamo = calcularCuotaPrestamo(parsedMontoSolicitado, tasaPorPeriodo, numeroTotalPeriodos);
                const costoSeguroVidaPorPeriodo = (parsedTasaSeguroVidaAnual * parsedMontoSolicitado) / divisorSeguroVida;
                const totalCalculado = cuotaSoloPrestamo + costoSeguroVidaPorPeriodo;

                setCuotaTotal(Math.round(totalCalculado));
            }, [montoSolicitado, tasaEfectivaAnual, plazoMeses, frecuenciaAmortizacion, tasaSeguroVidaAnual]);

            return (
                <div class="max-w-md mx-auto p-4 border rounded shadow-lg bg-white">
                    <h1 class="text-2xl font-bold mb-4 text-center">Simulador de Crédito</h1>

                    <div class="mb-3">
                        <label class="block text-sm font-semibold mb-1">Monto Solicitado ($)</label>
                        <input type="number" value={montoSolicitado} onChange={(e) => setMontoSolicitado(e.target.value)} class="w-full p-2 border rounded" placeholder="Ej: 10000000" />
                    </div>

                    <div class="mb-3">
                        <label class="block text-sm font-semibold mb-1">Tasa Efectiva Anual (%)</label>
                        <input type="number" value={tasaEfectivaAnual} onChange={(e) => setTasaEfectivaAnual(e.target.value)} class="w-full p-2 border rounded" placeholder="Ej: 12" step="0.01" />
                    </div>

                    <div class="mb-3">
                        <label class="block text-sm font-semibold mb-1">Plazo del Crédito (Meses)</label>
                        <input type="number" value={plazoMeses} onChange={(e) => setPlazoMeses(e.target.value)} class="w-full p-2 border rounded" placeholder="Ej: 24" min="1" />
                    </div>

                    <div class="mb-3">
                        <label class="block text-sm font-semibold mb-1">Frecuencia de Amortización</label>
                        <select value={frecuenciaAmortizacion} onChange={(e) => setFrecuenciaAmortizacion(e.target.value)} class="w-full p-2 border rounded">
                            <option value="mensual">Mensual</option>
                            <option value="bimestral">Bimestral</option>
                            <option value="trimestral">Trimestral</option>
                            <option value="semestral">Semestral</option>
                            <option value="anual">Anual</option>
                        </select>
                    </div>

                    {/* Campo del Seguro de Vida - AQUÍ ESTÁ */}
                    <div class="mb-3">
                        <label class="block text-sm font-semibold mb-1">Tasa de Seguro de Vida Anual (%)</label>
                        <input type="number" value={tasaSeguroVidaAnual} onChange={(e) => setTasaSeguroVidaAnual(e.target.value)} class="w-full p-2 border rounded" placeholder="Ej: 0.065 (para 0.065%)" min="0" step="0.001" />
                        <p class="text-xs text-gray-500 mt-1">Ingresa el porcentaje anual del seguro de vida (ej: `0.065`).</p>
                    </div>

                    {error && <p class="text-red-500 text-sm mt-3">{error}</p>}

                    {cuotaTotal !== null && !error && (
                        <div class="mt-4 p-4 bg-blue-100 border border-blue-300 rounded text-center">
                            <p class="text-lg font-bold">Cuota Total Estimada:</p>
                            <p class="text-3xl font-extrabold text-blue-700 mt-2">${new Intl.NumberFormat('es-CO').format(cuotaTotal)}</p>
                            <p class="text-sm text-gray-600 mt-1">(cada {frecuenciaAmortizacion === 'mensual' ? 'mes' :
                                    frecuenciaAmortizacion === 'bimestral' ? 'dos meses' :
                                    frecuenciaAmortizacion === 'trimestral' ? 'tres meses' :
                                    frecuenciaAmortizacion === 'semestral' ? 'seis meses' : 'año'})</p>
                            {parseFloat(tasaSeguroVidaAnual || 0) > 0 && (
                                <p class="text-xs text-gray-500 mt-2">Incluye seguro de vida.</p>
                            )}
                        </div>
                    )}

                    <p class="mt-4 text-xs text-gray-500 text-center">
                        Este simulador proporciona una estimación.
                    </p>
                </div>
            );
        };

        ReactDOM.createRoot(document.getElementById('root')).render(<App />);
    </script>
</body>
</html>
