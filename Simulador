<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulador de Crédito</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel" data-presets="react">
        const App = () => {
            const [principal, setPrincipal] = React.useState(10000000);
            const [annualRate, setAnnualRate] = React.useState(12);
            const [loanTermMonths, setLoanTermMonths] = React.useState(24);
            const [frequency, setFrequency] = React.useState('monthly');
            const [lifeInsuranceMonthly, setLifeInsuranceMonthly] = React.useState(15000);
            const [installment, setInstallment] = React.useState(null);
            const [error, setError] = React.useState('');
            const [loanPart, setLoanPart] = React.useState(0);
            const [insurancePart, setInsurancePart] = React.useState(0);

            const calculateInstallment = (p, r, n) => {
                if (p <= 0 || r < 0 || n <= 0) return 0;
                if (r === 0) return Math.round(p / n);
                return Math.round(p * (r * Math.pow(1 + r, n)) / (Math.pow(1 + r, n) - 1);
            };

            React.useEffect(() => {
                try {
                    const p = Number(principal);
                    const r = Number(annualRate);
                    const m = Number(loanTermMonths);
                    const ins = Number(lifeInsuranceMonthly) || 0;

                    if (p <= 0 || r < 0 || m <= 0 || ins < 0) {
                        setError('Todos los valores deben ser positivos');
                        return;
                    }

                    let rate, periods, multiplier;
                    switch(frequency) {
                        case 'monthly': rate = r/1200; periods = m; multiplier = 1; break;
                        case 'bimestral': rate = r/600; periods = m/2; multiplier = 2; break;
                        case 'trimestral': rate = r/400; periods = m/3; multiplier = 3; break;
                        case 'semestral': rate = r/200; periods = m/6; multiplier = 6; break;
                        case 'anual': rate = r/100; periods = m/12; multiplier = 12; break;
                        default: setError('Frecuencia inválida'); return;
                    }

                    if (!Number.isInteger(periods)) {
                        setError('El plazo no coincide con la frecuencia');
                        return;
                    }

                    const loan = calculateInstallment(p, rate, periods);
                    const insurance = ins * multiplier;
                    
                    setLoanPart(loan);
                    setInsurancePart(insurance);
                    setInstallment(loan + insurance);
                    setError('');
                } catch (e) {
                    setError('Error en los cálculos');
                }
            }, [principal, annualRate, loanTermMonths, frequency, lifeInsuranceMonthly]);

            return (
                <div className="min-h-screen bg-blue-50 flex items-center justify-center p-4">
                    <div className="bg-white p-6 rounded-xl shadow-md max-w-md w-full">
                        <h1 className="text-2xl font-bold text-center text-blue-800 mb-4">Simulador de Crédito</h1>
                        
                        <div className="space-y-3">
                            <Input label="Monto del préstamo ($)" value={principal} onChange={setPrincipal} />
                            <Input label="Tasa de interés anual (%)" value={annualRate} onChange={setAnnualRate} step="0.1" />
                            <Input label="Plazo (meses)" value={loanTermMonths} onChange={setLoanTermMonths} />
                            
                            <div>
                                <label className="block text-sm font-medium mb-1">Frecuencia de pago</label>
                                <select 
                                    className="w-full p-2 border rounded"
                                    value={frequency}
                                    onChange={(e) => setFrequency(e.target.value)}
                                >
                                    {['monthly','bimestral','trimestral','semestral','anual'].map(opt => (
                                        <option key={opt} value={opt}>
                                            {opt === 'monthly' ? 'Mensual' :
                                             opt === 'bimestral' ? 'Bimestral' :
                                             opt === 'trimestral' ? 'Trimestral' :
                                             opt === 'semestral' ? 'Semestral' : 'Anual'}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            
                            <Input label="Seguro de vida mensual ($)" value={lifeInsuranceMonthly} onChange={setLifeInsuranceMonthly} />
                        </div>

                        {error && <div className="mt-4 p-2 bg-red-100 text-red-700 rounded text-sm">{error}</div>}

                        {installment !== null && !error && (
                            <div className="mt-4 bg-blue-100 p-4 rounded-lg">
                                <div className="text-center mb-2">
                                    <span className="text-sm">Cuota {{
                                        monthly: 'mensual',
                                        bimestral: 'bimestral',
                                        trimestral: 'trimestral',
                                        semestral: 'semestral',
                                        anual: 'anual'
                                    }[frequency]}:</span>
                                    <div className="text-2xl font-bold">${installment.toLocaleString()}</div>
                                </div>
                                <div className="text-sm">
                                    <div className="flex justify-between">
                                        <span>Capital + intereses:</span>
                                        <span>${loanPart.toLocaleString()}</span>
                                    </div>
                                    {insurancePart > 0 && (
                                        <div className="flex justify-between">
                                            <span>Seguro de vida:</span>
                                            <span>${insurancePart.toLocaleString()}</span>
                                        </div>
                                    )}
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            );
        };

        const Input = ({ label, value, onChange, ...props }) => (
            <div>
                <label className="block text-sm font-medium mb-1">{label}</label>
                <input
                    type="number"
                    className="w-full p-2 border rounded"
                    value={value}
                    onChange={(e) => onChange(e.target.value)}
                    min="0"
                    {...props}
                />
            </div>
        );

        ReactDOM.createRoot(document.getElementById('root')).render(<App />);
    </script>
</body>
</html>
